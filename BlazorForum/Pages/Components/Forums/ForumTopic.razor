@page "/topic/{id:int}/{slug}"
@using Microsoft.AspNetCore.Identity
@using System.Collections.Generic

@inject NavigationManager navManager
@inject Domain.Interfaces.IManageForumTopics manageForumTopics
@inject Domain.Interfaces.IManageForumPosts  manageForumPosts
@inject UserManager<IdentityUser> userManager
@inject AuthenticationStateProvider authStateProvider
@inject IJSRuntime JSRuntime

@if (_topic == null)
{
    <div class="mb-2 loading-div">
        <em><i class="oi oi-cog se-spin-icon"></i> @GeneralResources.Loading</em>
    </div>
}
else
{
    <header class="forum-topic-header">
        <h3>@_topic.Title</h3>
    </header>
    <div class="forum-topic-text-div">
        <div class="">
            @if (_isEditorVisible != true)
                @((MarkupString)_topic.TopicText)

            @if (_topic.UserId == CurrentUserId)
            {
                @if (_isEditorVisible)
                {
                    <TopicForm OnTopicUpdated="@RefreshTopic" CurrentUserId="@CurrentUserId" ForumTopicToEdit="@_topic" OnCancel="@RefreshTopic"></TopicForm>
                }
                else
                {
                    <div>
                        <button class="btn btn-sm btn-blazorforum mb-2" type="button" @onclick="@(() => _isEditorVisible = true)">Edit</button>
                    </div>
                }
            }

            @if (_isEditorVisible != true)
            {
                <div class="forum-post-time d-inline-block">
                    Posted @Domain.Utilities.Formatting.DateTimeFormatting.RelativeDateAgo(_topic.PostedDate)
                    by @_topic.UserName
                </div>

                @if (_topic.EditedDate != null)
                {
                    <div class="forum-post-time ml-3 d-inline-block">
                        Edited @DateTimeFormatting.RelativeDateAgo(Convert.ToDateTime(_topic.EditedDate))
                    </div>
                }
            }
        </div>
    </div>

    if (_posts != null && _posts.Count > 0)
    {
    <ul class="forum-post-ul">
        @for(var index = 0; index < (_posts.Count); index++)
        {
            var i = index;
            _isPostEditorVisible.Add(false);
            <li>
                @if (_isPostEditorVisible[i] == false)
                    @((MarkupString)_posts[i].PostText)

                @if (_posts[i].UserId == CurrentUserId)
                {
                    if (_isPostEditorVisible[i] == true)
                    {
                        <PostForm OnPostUpdated="@(() => RefreshPost(i))" CurrentUserId="@CurrentUserId" PostToEdit="@_posts[i]" OnCancel="@(() => RefreshPost(i))"></PostForm>
                    }
                    else
                    {
                        <div>
                            <button class="btn btn-sm btn-blazorforum mb-2" type="button"
                                    @onclick="@(() => _isPostEditorVisible[i] = true)">
                                Edit
                            </button>
                        </div>
                    }
                }
                @if (_isPostEditorVisible[i] == false)
                {
                    <div class="forum-post-time d-inline-block">
                        Posted @DateTimeFormatting.RelativeDateAgo(_posts[i].PostedDate)
                        by @_posts[i].UserName
                    </div>
                    @if (_posts[i].EditedDate != null)
                    {
                        <div class="forum-post-time ml-3 d-inline-block">
                            Edited @DateTimeFormatting.RelativeDateAgo(Convert.ToDateTime(_posts[i].EditedDate))
                        </div>
                    }
                }
            </li>
         }
    </ul>
    }

    <div class="text-center">
        <button class="btn btn-blazorforum @loadMoreVisibility" @onclick="LoadMorePostsAsync">@GeneralResources.LoadMore</button>
    </div>
}

<section class="mt-4 mb-3">
    <h4>@GeneralResources.PostReply</h4>
    <AuthorizeView>
        <Authorized>
            <PostForm OnPostAdded="UpdatePostsAsync" TopicId="@id" CurrentUserId="@CurrentUserId"></PostForm>
        </Authorized>
        <NotAuthorized>
            <div class="alert alert-secondary">
                <span class="text-secondary">@GeneralResources.MustLoginToPost</span>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</section>


@code {
    [Parameter] public int id { get; set; }
    [Parameter] public string slug { get; set; }
    [Parameter] public string CurrentUserId { get; set; }
    private Models.ForumTopic _topic;
    private List<Models.ForumPost> _posts;
    private int _maxCount = 10;
    private string loadMoreVisibility;
    private bool _isEditorVisible = false;
    private List<bool> _isPostEditorVisible = new List<bool>();

    protected override async Task OnInitializedAsync()
    {
        await LoadTopicAsync();

        _posts = await manageForumPosts.GetApprovedForumPostsAsync(id);

        if (_maxCount >= _posts.Count)
            loadMoreVisibility = "d-none";

        _posts = _posts.Take(_maxCount).ToList();
        CurrentUserId = await new Domain.Utilities.Membership.UserInfo(userManager, authStateProvider).GetUserId();
        await AddUserToPostAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("setDocTitle", _topic.Title);
        }
    }

    private async Task LoadTopicAsync()
    {
        _topic = await manageForumTopics.GetForumTopicAsync(id);
        if(_topic == null || _topic.IsApproved != true)
            navManager.NavigateTo("/");

        var user = await userManager.FindByIdAsync(_topic.UserId);
        _topic.UserName = user.UserName;
    }

    public async void UpdatePostsAsync()
    {
        _posts = await manageForumPosts.GetApprovedForumPostsAsync(id);

        if (_maxCount >= _posts.Count)
            loadMoreVisibility = "d-none";
        else
            loadMoreVisibility = "d-inline-block";

        _posts = _posts.Take(_maxCount).ToList();

        await AddUserToPostAsync();
        StateHasChanged();
    }

    public async Task LoadMorePostsAsync()
    {
        _maxCount += 10;
        _posts = await manageForumPosts.GetApprovedForumPostsAsync(id);

        if (_maxCount >= _posts.Count)
            loadMoreVisibility = "d-none";
        else
            loadMoreVisibility = "d-inline-block";

        _posts = _posts.Take(_maxCount).ToList();

        await AddUserToPostAsync();
        StateHasChanged();
    }

    private async Task AddUserToPostAsync()
    {
        foreach (var post in _posts)
        {
            var user = await userManager.FindByIdAsync(post.UserId);
            post.UserName = user.UserName;
        }
    }

    private void RefreshTopic()
    {
        _isEditorVisible = false;
        StateHasChanged();
    }

    private void RefreshPost(int i)
    {
        _isPostEditorVisible[i] = false;
        StateHasChanged();
    }
}
