@page "/category/{id:int}/{slug}"
@inject NavigationManager navManager
@inject IManageForumCategories manageForumCategories
@inject IManageForumTopics manageForumTopics
@inject IManageForumPosts manageForumPosts
@inject UserManager<IdentityUser> userManager
@inject AuthenticationStateProvider authStateProvider
@inject IJSRuntime JSRuntime

@if (_category == null)
{
    <div class="mb-2 loading-div">
        <em><i class="oi oi-cog se-spin-icon"></i> @GeneralResources.Loading</em>
    </div>
}
else
{
    <header class="forum-category-header">
        <h3>@_category.Title</h3>
        <span class="forum-category-description">@_category.Description</span>
    </header>

    <ul class="forum-ul">
        @if (_topics == null || _topics.Count == 0)
        {
            <li>@GeneralResources.NoTopics</li>
        }
        else
        {
            @foreach (var topic in _topics)
            {
                <li>
                    <a href="@String.Format("/topic/{0}/{1}",
                        topic.ForumTopicId, UrlFormatting.PrepareUrlText(topic.Title))">
                        @topic.Title</a> 
                        @* // This isn't quite working right. Prevents editor from posting *@
                        @*( 
                            @(_postCountList != null ? _postCountList.Where(p => p.ParentItemId == topic.ForumTopicId)
                            .FirstOrDefault().ChildCount : 0 ) )*@
                    <div class="topic-blazifier">
                        Posted @Domain.Utilities.Formatting.DateTimeFormatting.RelativeDateAgo(topic.PostedDate)
                        by @topic.UserName
                    </div>
                </li>
            }
        }
    </ul>

    <div class="text-center">
        <button class="btn btn-blazorforum @_loadMoreVisibility" @onclick="LoadMoreTopicsAsync">
            @GeneralResources.LoadMore
        </button>
    </div>

    <section class="mt-4 mb-3">
        <h4>@GeneralResources.CreateNewTopic</h4>
        <AuthorizeView>
            <Authorized>
                <TopicForm OnTopicAdded="UpdateTopicsAsync" ForumId="@id" CurrentUserId="@CurrentUserId"></TopicForm>
            </Authorized>
            <NotAuthorized>
                <div class="alert alert-secondary">
                    <span class="text-secondary">@GeneralResources.LoginToPostTopic</span>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </section>
}

@code {
    [Parameter] public int id { get; set; }
    [Parameter] public string slug { get; set; }
    [Parameter] public string CurrentUserId { get; set; }
    private Models.ForumCategory _category;
    private List<Models.ForumTopic> _topics { get; set; }
    private List<TopicPostCount> _postCountList = new List<TopicPostCount>();
    private int _maxCount = 10;
    private string _loadMoreVisibility;

    protected override async Task OnInitializedAsync()
    {
        _category = await manageForumCategories.GetForumCategoryAsync(id);
        _topics = await manageForumTopics.GetApprovedForumTopicsAsync(id);

        if (_maxCount >= _topics.Count)
            _loadMoreVisibility = "d-none";

        _topics = _topics.OrderByDescending(p => p.PostedDate).Take(_maxCount).ToList();
        CurrentUserId = await new Domain.Utilities.Membership.UserInfo(userManager, authStateProvider).GetUserId();
        await AddUserToTopicAsync();

        //await SetTopicsCount();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await JSRuntime.InvokeVoidAsync("setDocTitle", _category.Title);
        }
    }

    public async void UpdateTopicsAsync()
    {
        _topics = await manageForumTopics.GetApprovedForumTopicsAsync(id);

        if (_maxCount >= _topics.Count)
            _loadMoreVisibility = "d-none";
        else
            _loadMoreVisibility = "d-inline-block";

        _topics = _topics.OrderByDescending(p => p.PostedDate).Take(_maxCount).ToList();

        await AddUserToTopicAsync();
        StateHasChanged();
    }

    public async Task LoadMoreTopicsAsync()
    {
        _maxCount += 10;
        _topics = await manageForumTopics.GetApprovedForumTopicsAsync(id);

        if (_maxCount >= _topics.Count)
            _loadMoreVisibility = "d-none";
        else
            _loadMoreVisibility = "d-inline-block";

        _topics = _topics.OrderByDescending(p => p.PostedDate).Take(_maxCount).ToList();

        await AddUserToTopicAsync();
        StateHasChanged();
    }

    private async Task AddUserToTopicAsync()
    {
        foreach (var topic in _topics)
        {
            var user = await userManager.FindByIdAsync(topic.UserId);
            topic.UserName = user.UserName;
        }
    }

    protected async Task SetTopicsCount()
    {
        var topics = await manageForumTopics.GetApprovedForumTopicsAsync(id);
        
        foreach (var topic in topics)
        {
            var posts = await manageForumPosts.GetApprovedForumPostsAsync(topic.ForumTopicId);
            var postCount = new TopicPostCount
            {
                ParentItemId = topic.ForumTopicId,
                ChildCount = posts.Count
            };
            _postCountList.Add(postCount);
        }
    }
}
