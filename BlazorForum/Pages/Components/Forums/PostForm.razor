@inject IManageForumPosts manageForumPosts
@inject NavigationManager navManager
@inject IJSRuntime jsRuntime
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContext
@implements IDisposable

    <EditForm EditContext="@_editContext" OnSubmit="AddNewPost">
        <DataAnnotationsValidator />
        <InputTextArea id="@("PostText-" + _forumPost.ForumPostId)" @bind-Value="_forumPost.PostText" />
        <ValidationMessage For="@(() => _forumPost.PostText)" />
        @if (PostToEdit != null)
        {
            <button class="btn btn-blazorforum mt-2" type="submit">
                @GeneralResources.UpdateBtnText
            </button>
            <button class="btn btn-blazorforum mt-2" type="button" @onclick="@(() => CancelUpdate())">
                @GeneralResources.CancelBtnText
            </button>
        }
        else
        {
            <button class="btn btn-blazorforum mt-2 @_btnVisibility" type="submit">
                @GeneralResources.AddPostBtnText
            </button>
            <div class="rounded bg-veryDarkBlue p-2 mt-2 text-light @_submitVisibility">
                <i class="oi oi-cog se-spin-icon"></i> @GeneralResources.BtnPostingText
            </div>
        }
    </EditForm>

@code {
    [Parameter] public string CurrentUserId { get; set; }
    [Parameter] public Action OnPostAdded { get; set; }
    [Parameter] public Action OnPostUpdated { get; set; }
    [Parameter] public Action OnCancel { get; set; }
    [Parameter] public Models.ForumPost PostToEdit { get; set; }
    [Parameter] public int TopicId { get; set; }
    private EditContext _editContext;
    private Models.ForumPost _forumPost = new Models.ForumPost() { UserId = "placeholder" };
    private string _btnVisibility = "d-block";
    private string _submitVisibility = "d-none";

    protected override void OnInitialized()
    {
        if (PostToEdit != null)
            _forumPost = PostToEdit;

        _editContext = new EditContext(_forumPost);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeVoidAsync("methods.loadEditor", "PostText-" + _forumPost.ForumPostId);
        }
    }

    public void Dispose()
    {
        jsRuntime.InvokeVoidAsync("methods.removeTargetedEditor", "PostText-" + _forumPost.ForumPostId);
    }

    private async Task AddNewPost()
    {
        _forumPost.PostText = await jsRuntime.InvokeAsync<string>("methods.getTargetedEditorText", "PostText-" + _forumPost.ForumPostId);
        var isValid = _editContext.Validate();
        if (isValid)
        {
            _btnVisibility = "d-none";
            _submitVisibility = "d-inline-block";

            if (PostToEdit != null)
                await UpdatePost();
            else
            {
                await CreatePost();

                _btnVisibility = "d-inline-block";
                _submitVisibility = "d-none";
                _forumPost.PostText = string.Empty;
                await jsRuntime.InvokeVoidAsync("methods.clearTargetedEditor", "PostText-" + _forumPost.ForumPostId);
                StateHasChanged();
            }
        }
    }

    private async Task CreatePost()
    {
        var newPost = new Models.ForumPost()
        {
            PostText = _forumPost.PostText,
            UserId = CurrentUserId,
            PostedDate = DateTime.Now.ToUniversalTime(),
            ForumTopicId = TopicId,
            Flags = 0,
            IsModeratorChanged = false,
            IsDeleted = false,
            IsApproved = true,
            //UserIP = httpContext.HttpContext.Connection.RemoteIpAddress.ToString() // Issues with this failing on server
        };

        var posted = await manageForumPosts.AddNewPostAsync(newPost);

        OnPostAdded?.Invoke();
    }

    private async Task UpdatePost()
    {
        var editedPost = new Models.ForumPost
        {
            ForumPostId = _forumPost.ForumPostId,
            PostText = _forumPost.PostText,
            UserId = _forumPost.UserId,
            PostedDate = _forumPost.PostedDate,
            ForumTopicId = _forumPost.ForumTopicId,
            Flags = _forumPost.Flags,
            IsModeratorChanged = _forumPost.IsModeratorChanged,
            IsDeleted = _forumPost.IsDeleted,
            IsApproved = _forumPost.IsApproved,
            EditedBy = CurrentUserId,
            EditedDate = DateTime.Now.ToUniversalTime(),
            UserIP = _forumPost.UserIP
        };

        var updated = await manageForumPosts.UpdatePostAsync(editedPost);

        if (updated)
        {
            await jsRuntime.InvokeVoidAsync("methods.removeTargetedEditor", "PostText-" + _forumPost.ForumPostId);
            OnPostUpdated?.Invoke();
        }
    }

    private async void CancelUpdate()
    {
        await jsRuntime.InvokeVoidAsync("methods.removeTargetedEditor", "PostText-" + _forumPost.ForumPostId);
        OnCancel?.Invoke();
    }
}
