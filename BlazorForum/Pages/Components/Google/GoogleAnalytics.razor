@inject IJSRuntime jsRuntime
@inject NavigationManager navManager
@inject Microsoft.Extensions.Configuration.IConfiguration config
@implements IDisposable

@code {
    private string _googleAnalyticsId;

    protected override async Task OnInitializedAsync()
    {
        _googleAnalyticsId = config.GetSection("GoogleAnalyticsID").Value;

        if (!String.IsNullOrEmpty(_googleAnalyticsId))
        {
            navManager.LocationChanged -= OnLocationChanged;
            navManager.LocationChanged += OnLocationChanged;

            await Task.Delay(1).ContinueWith(async t =>
            {
                await jsRuntime.InvokeVoidAsync("methods.loadGoogleAnalytics", navManager.Uri, _googleAnalyticsId);
            });
        }
    }

    public void Dispose()
    {
        navManager.LocationChanged -= OnLocationChanged;
    }

    private async void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        if (!String.IsNullOrEmpty(_googleAnalyticsId))
        {
            await Task.Delay(1).ContinueWith(async t =>
            {
                await jsRuntime.InvokeVoidAsync("methods.loadGoogleAnalytics", new Uri(args.Location).PathAndQuery, _googleAnalyticsId);
            });
        }
    }
}
