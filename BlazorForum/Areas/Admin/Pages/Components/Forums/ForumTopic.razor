@page "/admin/forums/{forumId:int}/categories/{categoryId:int}/topics/{topicId:int}"
@inject IManageForumTopics manageTopics
@inject IManageForumPosts managePosts
@inject UserManager<IdentityUser> userManager
@inject IBlazorModal blazorModal
@inject NavigationManager navManager
@inject IJSRuntime jsRuntime

<h3>@_topic.Title</h3>
<section class="content-container">
    @((MarkupString)_topic.TopicText)
    <div class="mt-2">
        <a href="@String.Format("/admin/forums/{0}/categories/{1}/topics/{2}/edit", forumId, categoryId, topicId)"
           class="btn btn-blazorforum mr-2">Edit</a>
        <button class="btn btn-blazorforum-danger" @onclick="(() => DeleteTopicClicked())">Delete</button>
    </div>
</section>

<section class="mt-3">
    <header class="secondary-header">
        <i class="oi oi-comment-square mr-2"></i>Posts
    </header>
    <ul class="forum-ul">
        @if(_posts == null)
        {
            <li>Loading...</li>
        }
        else if(_posts.Count == 0)
        {
            <li>No posts found.</li>
        }
        @foreach (var post in _posts)
        {
            <li>
                @((MarkupString)post.PostText)
                <div class="list-item-details">
                    Posted @DateTimeFormatting.RelativeDateAgo(post.PostedDate)
                    by @post.UserName  | Flags @post.Flags
                    <div>
                        <a href="@String.Format("/admin/forums/{0}/categories/{1}/topics/{2}/posts/{3}/edit", forumId, categoryId, topicId, post.ForumPostId)"
                           class="btn btn-sm btn-blazorforum mt-1 mr-2">
                            Edit
                        </a>
                        <button class="btn btn-sm btn-blazorforum-danger mt-1" @onclick="@(() => DeleteClicked(post.ForumPostId))">
                            Delete
                        </button>
                    </div>
                </div>
            </li>
        }
    </ul>
</section>

@code {
    [Parameter] public int forumId { get; set; }
    [Parameter] public int categoryId { get; set; }
    [Parameter] public int topicId { get; set; }
    private Models.ForumTopic _topic = new Models.ForumTopic();
    private List<Models.ForumPost> _posts = new List<Models.ForumPost>();
    private int _postIdToDelete = -1;
    private bool _isDeletingTopic;

    public void Dispose()
    {
        blazorModal.OnConfirmYes -= YesConfirmed;
    }

    protected override async Task OnInitializedAsync()
    {
        _topic = await manageTopics.GetForumTopicAsync(topicId);
        await LoadPostsAsync();
        blazorModal.OnConfirmYes += YesConfirmed;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeVoidAsync("setDocTitle", "Forum Topic | Administration");
        }
    }

    private async Task LoadPostsAsync()
    {
        _posts = await managePosts.GetForumPostsAsync(topicId);
        _posts = _posts.OrderByDescending(p => p.PostedDate).ToList();
        await AddUserToPost();
    }

    private async Task AddUserToPost()
    {
        foreach (var post in _posts)
        {
            var user = await userManager.FindByIdAsync(post.UserId);
            post.UserName = user.UserName;
        }
    }

    private void DeleteTopicClicked()
    {
        _isDeletingTopic = true;
        blazorModal.Show<ConfirmModal>("Delete Modal", BlazorModalParameter.Get("ModalText", "Are you sure you want to delete this topic and all related posts?"));
    }

    private void DeleteClicked(int id)
    {
        _postIdToDelete = id;
        blazorModal.Show<ConfirmModal>("Delete Modal", BlazorModalParameter.Get("ModalText", "Are you sure you want to delete this post?"));
    }

    public async void YesConfirmed()
    {
        blazorModal.Close();
        if(_postIdToDelete != -1)
        {
            var deleted = await managePosts.DeletePostAsync(_postIdToDelete);
            if (deleted)
                await LoadPostsAsync();
            _postIdToDelete = -1;
            StateHasChanged();
        }
        else if(_isDeletingTopic == true)
        {
            var deletedTopic = await manageTopics.DeleteForumTopicAsync(topicId);
            if (deletedTopic)
                navManager.NavigateTo(String.Format("/admin/forums/{0}/categories/{1}", forumId, categoryId));
        }
    }
}
