@page "/admin/forums/{forumId:int}/categories/{id:int}"
@inject IManageForumCategories manageCategories
@inject IManageForumTopics manageTopics
@inject UserManager<IdentityUser> userManager
@inject IBlazorModal blazorModal

<section class="mb-3">
    <a href="@String.Format("/admin/forums/{0}/categories/{1}/edit", forumId, id)"
       class="btn btn-blazorforum">Edit Details</a>
</section>
<section>
    <header>
        <h3>@_category.Title</h3>
    </header>
    <section class="content-container">
        @_category.Description
    </section>

    <section class="mt-3">
        <header class="secondary-header">
            <i class="oi oi-comment-square mr-2"></i>Topics
        </header>
        <ul class="forum-ul">
            @if (_topics == null)
            {
                <li>Loading...</li>
            }
            else if (_topics.Count == 0)
            {
                <li>No topics found.</li>
            }
            @foreach (var topic in _topics)
            {
                <li>
                    @* // TODO - Add Edit/Delete functionality, display post flag count, mark as approved..etc. *@
                    @* //      - Also build topic component *@
                    @topic.Title
                    <div class="list-item-details">
                        Posted @DateTimeFormatting.RelativeDateAgo(topic.PostedDate)
                        by @topic.UserName | Flags @topic.Flags
                        <div>
                            <a href="@String.Format("/admin/forums/{0}/categories/{1}/topics/{2}", forumId, id, topic.ForumTopicId)" 
                               class="btn btn-sm btn-blazorforum mt-1 mr-2">
                                Edit
                            </a>
                            <button class="btn btn-sm btn-blazorforum mt-1" @onclick="@(() => DeleteClicked(topic.ForumTopicId))">
                                Delete
                            </button>
                        </div>
                    </div>
                </li>
            }
        </ul>
    </section>
</section>

@code {
    [Parameter] public int forumId { get; set; }
    [Parameter] public int id { get; set; }
    private Models.ForumCategory _category = new Models.ForumCategory();
    private List<Models.ForumTopic> _topics = new List<Models.ForumTopic>();
    private int _itemIdToDelete = -1;

    public void Dispose()
    {
        blazorModal.OnConfirmYes -= YesConfirmed;
    }

    protected override async Task OnInitializedAsync()
    {
        _category = await manageCategories.GetForumCategoryAsync(id);
        await LoadTopicsAsync();
        blazorModal.OnConfirmYes += YesConfirmed;
    }

    private async Task LoadTopicsAsync()
    {
        _topics = await manageTopics.GetForumTopicsAsync(id);
        _topics = _topics.OrderByDescending(p => p.PostedDate).ToList();
        await AddUserToTopic();
    }

    private async Task AddUserToTopic()
    {
        foreach (var topic in _topics)
        {
            var user = await userManager.FindByIdAsync(topic.UserId);
            topic.UserName = user.UserName;
        }
    }

    private void DeleteClicked(int id)
    {
        _itemIdToDelete = id;
        blazorModal.Show<ConfirmModal>("Delete Modal", BlazorModalParameter.Get("ModalText", "Are you sure you want to delete this topic and all related posts?"));
    }

    public async void YesConfirmed()
    {
        blazorModal.Close();
        if(_itemIdToDelete != -1)
        {
            var deleted = await manageTopics.DeleteForumTopicAsync(_itemIdToDelete);
            if (deleted)
                await LoadTopicsAsync();
            _itemIdToDelete = -1;
            StateHasChanged();
        }
    }
}
