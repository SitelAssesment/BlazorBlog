@page "/admin/membership/{id}/edit"
@inject UserManager<IdentityUser> userManager
@inject NavigationManager navManager
@inject RoleManager<IdentityRole>  roleManager
@inject IJSRuntime jsRuntime

<h3>Edit User</h3>
@*////////////////////////////////////////////////////////////////////////////////////*@
@*///// There's a problem here with the form not displaying validation errors ////////*@
@*////////////////////////////////////////////////////////////////////////////////////*@
<section class="content-container">
    @if (_user == null)
    {
        <div><i class="oi oi-cog se-spin-icon"></i>Loading User Information...</div>
    }
    else
    {
<EditForm Model="@_user" OnValidSubmit="UpdateUser">
    <DataAnnotationsValidator />
    <div class="input-group">
        <div class="input-group-prepend">
            <span class="input-group-text">Username</span>
        </div>
        <InputText @bind-Value="_user.UserName" class="form-control"></InputText>
    </div>
    <ValidationMessage For="@(() => _user.UserName)"></ValidationMessage>

    <div class="input-group mt-2">
        <div class="input-group-prepend">
            <span class="input-group-text">Email</span>
        </div>
        <InputText @bind-Value="_user.Email" class="form-control"></InputText>
    </div>
    <ValidationMessage For="@(() => _user.Email)"></ValidationMessage>

    <div class="input-group mt-2">
        <div class="input-group-prepend">
            <span class="input-group-text">Role</span>
        </div>
        @if (_roles == null)
        {
            <div>Loading Roles...</div>
        }
        else
        {
        <select class="form-control" @bind="_selectedItem.Value">
            @foreach (var option in _options)
            {
                <option selected="@option.Selected" value="@option.Value">@option.Text</option>
            }
        </select>
        }
    </div>

    <div class="input-group mt-2">
        <div class="input-group-prepend">
            <span class="input-group-text">Email Confirmed</span>
        </div>
        <div class="form-control">
            <InputCheckbox @bind-Value="_user.EmailConfirmed"></InputCheckbox>
        </div>
    </div>

    <div class="input-group mt-2">
        <div class="input-group-prepend">
            <span class="input-group-text">Two Factor Enabled</span>
        </div>
        <div class="form-control">
            <InputCheckbox @bind-Value="_user.TwoFactorEnabled"></InputCheckbox>
        </div>
    </div>

    <div class="input-group mt-2">
        <div class="input-group-prepend">
            <span class="input-group-text">Phone Number</span>
        </div>
        <InputText @bind-Value="_user.PhoneNumber" class="form-control"></InputText>
    </div>
    <ValidationMessage For="@(() => _user.PhoneNumber)"></ValidationMessage>

    <div class="input-group mt-2">
        <div class="input-group-prepend">
            <span class="input-group-text">Phone Number Confirmed</span>
        </div>
        <div class="form-control">
            <InputCheckbox @bind-Value="_user.PhoneNumberConfirmed"></InputCheckbox>
        </div>
    </div>
    <div class="mt-2">
        <button type="submit" class="btn btn-blazorforum mr-2">Update</button>
        <button @onclick="@(() => navManager.NavigateTo("/admin/membership/"))" type="button" class="btn btn-blazorforum">Cancel</button>
    </div>
</EditForm>
    }
</section>

@code {
    [Parameter] public string id { get; set; }
    private IdentityUser _user = new IdentityUser();
    private List<IdentityRole> _roles = new List<IdentityRole>();
    private List<SelectListItem> _options = new List<SelectListItem>();
    private SelectListItem _selectedItem = new SelectListItem();

    protected override async Task OnInitializedAsync()
    {
        _user = await userManager.FindByIdAsync(id);
        _roles = roleManager.Roles.ToList();

        foreach (var role in _roles)
        {
            if(await userManager.IsInRoleAsync(_user, role.Name))
                _options.Add(new SelectListItem(role.Name, role.Id, true));
            else
                _options.Add(new SelectListItem(role.Name, role.Id, false));
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender){
            await jsRuntime.InvokeVoidAsync("setDocTitle", "Edit User | Administration");
        }
    }

    private async Task UpdateUser()
    {
        var update = await userManager.UpdateAsync(_user);
        if (update.Succeeded)
        {
            var currentRoles = await userManager.GetRolesAsync(_user);
            var selectedRole = _roles.Where(p => p.Id == _selectedItem.Value).FirstOrDefault();
            var inRole = await userManager.IsInRoleAsync(_user, selectedRole.Name);
            if(selectedRole != null  && !inRole)
            {
                // Remove user from roles before adding them, so they aren't in multiple roles
                // This may change later if it's determined that users should be in multiple roles.
                if(currentRoles.Count > 0)
                    await userManager.RemoveFromRolesAsync(_user, currentRoles);

                await userManager.AddToRoleAsync(_user, selectedRole.Name);
            }

            navManager.NavigateTo("/admin/membership/");
        }
    }
}
